import com.android.build.gradle.tasks.PackageApplication

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'com.google.android:support-v4:r7'
    compile 'eu.the4thfloor.volley:com.android.volley:2014.12.21'
    compile project(':libs:common')
}

def getDate() {
    (new Date().format('yyyyMMdd')).toInteger()
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        targetSdkVersion 19
        minSdkVersion 14
        versionCode getDate()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        debug {
            storeFile file(System.getProperty("user.home") + "/.android/debug.keystore")
        }

        release {
            // Save password to ~/.gradle/gradle.properties
            storeFile file(System.getProperty("user.home") + MC_ANDROID_STORE_PATH)
            storePassword MC_ANDROID_STORE_PASSWORD
            keyAlias "RainNoise"
            keyPassword MC_ANDROID_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            debuggable true
            versionNameSuffix "-DEBUG"
            signingConfig signingConfigs.debug
        }

        release {
            debuggable false
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            manifest {
                srcFile 'AndroidManifest.xml'
            }
            java {
                srcDir 'src'
            }
            res {
                srcDir 'res'
            }
            assets {
                srcDir 'assets'
            }
            resources {
                srcDir 'src'
            }
        }
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(PackageApplication) { pkgTask ->
    pkgTask.jniFolders = [new File(buildDir, 'lib')]
}

